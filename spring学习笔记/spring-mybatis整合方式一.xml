一.采用数据映射器（MapperFactoryBean）的方式，不用写mybatis映射文件，采用注解方式提供相应的sql语句和输入参数。
  （1）Spring配置文件：

     <!-- 引入jdbc配置文件 -->
     <context:property-placeholder location="jdbc.properties"/>

      <!--创建jdbc数据源 -->
      <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxActive" value="${maxActive}"/>
        <property name="maxIdle" value="${maxIdle}"/>
        <property name="minIdle" value="${minIdle}"/>
      </bean>

      <!-- 创建SqlSessionFactory，同时指定数据源-->
      <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
      <property name="dataSource" ref="dataSource" /> 
      </bean>

      <!--创建数据映射器，数据映射器必须为接口-->
      <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
      <property name="mapperInterface" value="com.xxt.ibatis.dbcp.dao.UserMapper" />
      <property name="sqlSessionFactory" ref="sqlSessionFactory" /> 
      </bean>

      <bean id="userDaoImpl2" class="com.xxt.ibatis.dbcp.dao.impl.UserDaoImpl2">
      <property name="userMapper" ref="userMapper"/>
 </bean>
 （2）数据映射器UserMapper,代码如下:
  public interface UserMapper {
        @Select("SELECT * FROM user WHERE id = #{userId}") 
        User getUser(@Param("userId") long id); 
  }
 (3) dao接口类UserDao，代码如下：
   public interface UserDao {
       public User getUserById(User user);
   }
(4)dao实现类UserDaoImpl2,，代码如下:
  public class UserDaoImpl2 implements UserDao {
       private UserMapper userMapper;

       public void setUserMapper(UserMapper userMapper) { 
           this.userMapper = userMapper; 
       } 

       public User getUserById(User user) {
          return userMapper.getUser(user.getId()); 
       }
   }